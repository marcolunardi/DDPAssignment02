library(AppliedPredictiveModeling)
library(e1071)
library(caret)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model = svm(CompressiveStrength ~ ., data = testing)
model
pred = predict(model, testing)
RMSE = sqrt(sum((pred - testing$CompressiveStrength)^2))
RMSEm = sqrt(mean((pred - testing$CompressiveStrength)^2))
MSE = (sum((pred - testing$CompressiveStrength)^2))
MSEm = (mean((pred - testing$CompressiveStrength)^2))
predins = predict(model, training)
RMSEins = sqrt(sum((predins - training$CompressiveStrength)^2))
RMSE
RMSEm
MSE
MSEm
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model = svm(CompressiveStrength ~ ., data = training)
model
pred = predict(model, testing)
RMSE = sqrt(sum((pred - testing$CompressiveStrength)^2))
RMSEm = sqrt(mean((pred - testing$CompressiveStrength)^2))
MSE = (sum((pred - testing$CompressiveStrength)^2))
MSEm = (mean((pred - testing$CompressiveStrength)^2))
predins = predict(model, training)
RMSEins = sqrt(sum((predins - training$CompressiveStrength)^2))
RMSE
RMSEm
MSE
MSEm
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model = svm(CompressiveStrength ~ ., data = concrete)
model
pred = predict(model, testing)
RMSE = sqrt(sum((pred - testing$CompressiveStrength)^2))
RMSEm = sqrt(mean((pred - testing$CompressiveStrength)^2))
MSE = (sum((pred - testing$CompressiveStrength)^2))
MSEm = (mean((pred - testing$CompressiveStrength)^2))
predins = predict(model, training)
RMSEins = sqrt(sum((predins - training$CompressiveStrength)^2))
RMSE
RMSEm
MSE
MSEm
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model = svm(CompressiveStrength ~ ., data = testing)
model
pred = predict(model, testing)
RMSE = sqrt(sum((pred - testing$CompressiveStrength)^2))
RMSEm = sqrt(mean((pred - testing$CompressiveStrength)^2))
MSE = (sum((pred - testing$CompressiveStrength)^2))
MSEm = (mean((pred - testing$CompressiveStrength)^2))
predins = predict(model, training)
RMSEins = sqrt(sum((predins - training$CompressiveStrength)^2))
RMSE
RMSEm
MSE
MSEm
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model = svm(CompressiveStrength ~ ., data = training)
model
pred = predict(model, testing)
RMSE = sqrt(sum((pred - testing$CompressiveStrength)^2))
RMSEm = sqrt(mean((pred - testing$CompressiveStrength)^2))
MSE = (sum((pred - testing$CompressiveStrength)^2))
MSEm = (mean((pred - testing$CompressiveStrength)^2))
predins = predict(model, training)
RMSEins = sqrt(sum((predins - training$CompressiveStrength)^2))
RMSE
RMSEm
MSE
MSEm
library(caret)
library(randomForest)
fileUrl<-"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileUrl,destfile="pml-training.csv")
training <- read.csv("pml-training.csv", header = TRUE, na.strings=c("NA","#DIV/0!",""))
fileUrl<-"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl,destfile="pml-testing.csv")
testing <- read.csv("pml-testing.csv", header = TRUE, na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
summary(training)
summary(testing)
traincol <- training[,-(1:7)]
for(i in c(1:(ncol(traincol)-1),1)) {
traincol[,i] = as.numeric(as.character(traincol[,i]))
}
traincolnames <- colnames(traincol[colSums(is.na(traincol)) == 0])
trainred <- traincol[traincolnames]
dim(trainred)
trainnzv <- nearZeroVar(trainred, saveMetrics=TRUE)
cmatrix <- cor(trainred[,-53])
traincorr = findCorrelation(cmatrix, cutoff = .95, verbose = FALSE)
train = trainred[,-traincorr]
dim(train)
inTrain <- createDataPartition(train$classe, p=(2/3), list=FALSE)
trainset <- train[ inTrain,]
testset <- train[-inTrain,]
dim(trainset)
dim(testset)
set.seed(1)
trainrf=randomForest(classe ~ ., data=trainset, ntree=150, importance=TRUE)
trainrf
trainpred <- predict(trainrf, trainset, type = "class")
confusionMatrix(trainpred, trainset$classe)
testpred <- predict(trainrf, testset, type = "class")
confusionMatrix(testpred, testset$classe)
predmatrix = with(testset, table(testpred, classe))
sum(diag(predmatrix))/sum(as.vector(predmatrix))
answers <- predict(trainrf, testing)
answers
varImpPlot(trainrf,)
install.packages("rattle")
library(rattle)
install.packages("corrplot")
library(corrplot)
install.packages("tree")
library(tree)
set.seed(1)
traintree=tree(classe ~ ., data=trainset)
summary(traintree)
set.seed(1)
traintree <- rpart(classe ~ ., data=trainset, method = "class")
confusionMatrix(traintree, trainset$classe)
testtree <- predict(traintree, testset, type ="class")
confusionMatrix(testtree, testset$classe)
fancyRpartPlot(traintree$finalModel)
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
set.seed(1)
traintree <- rpart(classe ~ ., data=trainset, method = "class")
confusionMatrix(traintree, trainset$classe)
testtree <- predict(traintree, testset, type ="class")
confusionMatrix(testtree, testset$classe)
fancyRpartPlot(traintree$finalModel)
set.seed(1)
traintree <- rpart(classe ~ ., data=trainset, method = "class")
testtree <- predict(traintree, testset, type ="class")
confusionMatrix(testtree, testset$classe)
fancyRpartPlot(testtree$finalModel)
set.seed(1)
traintree <- rpart(classe ~ ., data=trainset, method = "class")
testtree <- predict(traintree, testset, type ="class")
confusionMatrix(testtree, testset$classe)
fancyRpartPlot(traintree)
class(traintree)
fancyRpartPlot(traintree$finalModel)
library(knitr)
names(training)
names(testing)
preProc <- preProcess(trainset, method = "pca", thresh = 0.99)
trainPC <- predict(preProc, trainset)
valid_testPC <- predict(preProc, testset)
confusionMatrix(valid_testPC, testset$classe)
dim(trainset)
preProc <- preProcess(trainset[,-49], method = "pca", thresh = 0.99)
trainPC <- predict(preProc, trainset[,-49])
valid_testPC <- predict(preProc, testset[,-49])
confusionMatrix(valid_testPC, testset$classe)
valid_testPC
preprocpca <- preProcess(trainset[,-49], method = "pca", thresh = 0.99)
trainpca <- predict(preprocpca, trainset[,-49])
testpca <- predict(preprocpca, testset[,-49])
dim(trainpca)
dim(testpca)
names(pca)
names(trainpca)
preprocpca <- preProcess(trainset[,-49], method = "pca", thresh = 0.99)
trainpca <- predict(preprocpca, trainset[,-49])
testpca <- predict(preprocpca, testset[,-49])
trainrfpca <- train(trainset$classe ~ ., method = "rf", data = trainpca, importance = TRUE)
preprocpca <- preProcess(trainset[,-49], method = "pca", thresh = 0.99)
trainpca <- predict(preprocpca, trainset[,-49])
testpca <- predict(preprocpca, testset[,-49])
trainrfpca <- train(trainset$classe ~ ., method = "rf", data = trainpca,
trControl = trainControl(method = "cv", number = 4), importance = TRUE)
preprocpca <- preProcess(trainset[,-49], method = "pca", thresh = 0.99)
trainpca <- predict(preprocpca, trainset[,-49])
testpca <- predict(preprocpca, testset[,-49])
trainrfpca <- train(trainset$classe ~ ., method = "rf", data = trainpca,
trControl = trainControl(method = "cv", number = 4), importance = TRUE)
testpredpca <- predict(trainrfpca, testpca, type = "class")
confusionMatrix(testpredpca, testset$classe)
testpredpca <- predict(trainrfpca, testpca)
confusionMatrix(testpredpca, testset$classe)
corrplot(cmatrix, method = "color", type="lower", order="original", tl.cex = 0.6,
tl.col="black", tl.srt = 45)
corrplot(cmatrix, method = "color", type="full", order="original", tl.cex = 0.6,
tl.col="black", tl.srt = 45)
corrplot(cmatrix, method = "color", type="full", order="original", tl.cex = 0.6,
tl.col="blue", tl.srt = 45)
corrplot(cmatrix, method = "color", type="full", order="original", tl.cex = 0.7,
tl.col="black", tl.srt = 45)
corrplot(cmatrix, method = "color", type="full", order="original", tl.cex = 0.6,
tl.col="blue", tl.srt = 45)
corrplot(cmatrix, method = "color", type="full", order="original", tl.cex = 0.65,
tl.col="blue", tl.srt = 45)
names(training)
dim(trainred)
dim(train)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(corrplot)
fileUrl<-"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileUrl,destfile="pml-training.csv")
training <- read.csv("pml-training.csv", header = TRUE, na.strings=c("NA","#DIV/0!",""))
fileUrl<-"http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl,destfile="pml-testing.csv")
testing <- read.csv("pml-testing.csv", header = TRUE, na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
summary(training)
summary(testing)
traincol <- training[,-(1:7)]
for(i in c(1:(ncol(traincol)-1),1)) {
traincol[,i] = as.numeric(as.character(traincol[,i]))
}
traincolnames <- colnames(traincol[colSums(is.na(traincol)) == 0])
trainred <- traincol[traincolnames]
trainnzv <- nearZeroVar(trainred, saveMetrics=TRUE)
dim(trainred)
cmatrix <- cor(trainred[,-53])
corrplot(cmatrix, method = "color", type="full", order="original", tl.cex = 0.6,
tl.col="black", tl.srt = 45)
traincorr = findCorrelation(cmatrix, cutoff = .95, verbose = FALSE)
train = trainred[,-traincorr]
dim(train)
inTrain <- createDataPartition(train$classe, p=(2/3), list=FALSE)
trainset <- train[ inTrain,]
testset <- train[-inTrain,]
dim(trainset)
dim(testset)
set.seed(1)
trainrf=randomForest(classe ~ ., data=trainset, ntree=150, importance=TRUE)
trainrf
varImpPlot(trainrf,)
trainpred <- predict(trainrf, trainset, type = "class")
confusionMatrix(trainpred, trainset$classe)
testpred <- predict(trainrf, testset, type = "class")
confusionMatrix(testpred, testset$classe)
answers <- predict(trainrf, testing)
answers
set.seed(1)
traintree <- rpart(classe ~ ., data=trainset, method = "class")
testtree <- predict(traintree, testset, type ="class")
confusionMatrix(testtree, testset$classe)
preprocpca <- preProcess(trainset[,-49], method = "pca", thresh = 0.99)
trainpca <- predict(preprocpca, trainset[,-49])
testpca <- predict(preprocpca, testset[,-49])
trainrfpca <- train(trainset$classe ~ ., method = "rf", data = trainpca,
trControl = trainControl(method = "cv", number = 4), importance = TRUE)
svm <- train(classe ~ ., data=trainset,
model="svm", trControl=ctrl)
svmPred <- predict(svm, newdata=testset)
sum(svmPred == testset$classe) / length(svmPred)
confusionMatrix(svmPred, testset$classe)
library(1071)
library(e1071)
svm <- train(classe ~ ., data=trainset,
model="svm", trControl=ctrl)
svmPred <- predict(svm, newdata=testset)
sum(svmPred == testset$classe) / length(svmPred)
confusionMatrix(svmPred, testset$classe)
svm <- train(classe ~ ., data=trainset, model="svm", trControl=ctrl)
svmPred <- predict(svm, newdata=testset)
sum(svmPred == testset$classe) / length(svmPred)
confusionMatrix(svmPred, testset$classe)
svm <- train(classe ~ ., data=trainset, model="svm")
library(jsonlite)
library(plyr)
library(ggplot2)
metis <- fromJSON("https://api.github.com/repos/mbostock/d3/stats/commit_activity")
days <- data.frame(matrix(NA, nrow=7, ncol=52))
for (i in 1:52) {
days[,i] <- dayvec <- as.vector(metis[[i,1]])
}
csums <- colSums(days)
daycsum <- rbind(days, csums)
rsums <- rowSums(daycsum)
daysum <- cbind(daycsum, rsums)
Weekday <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Weeksum")
commits <- cbind(Weekday, daysum)
names(commits) <- c("Weekday", as.character(c(1:52)), "Daysum")
commits[,1] <- as.factor(commits[,1])
weekd <- c("weekend", "workday", "workday", "workday", "workday", "workday", "weekend", "Weeksum")
commitw <- commits
commitw[,1] <- weekd
commitg <- ddply(commitw, .(weekd), numcolwise(sum), drop=FALSE)
commitg$weekd <- factor(commitg$weekd, levels=c("workday","weekend","Weeksum"))
library("reshape2")
d1 <- commitg[-2,-54]
md1 <- melt(d1, id.vars="weekd", value.name="value", variable.name="weeks")
g <-ggplot(md1, aes(x=weeks, y=value, group=weekd, fill=weekd, color=weekd))
g <- g + geom_bar(color="black", stat='identity')
## g <- g + geom_line()
g <- g + theme(axis.text.x = element_text(size=12, face="bold"))
g <- g + theme(axis.text.y = element_text(size=15, face="bold"))
g <- g + theme(axis.title=element_text(size=12,face="bold"))
g <- g + theme(title=element_text(size=14,face="bold"))
g <- g + labs(y = "Number of commits")
g <- g + labs(title = "Number of commits for each week in last year (github.com/mbostock/d3) - Color by weekday")
print(g)
library(jsonlite)
library(plyr)
library(ggplot2)
metis <- fromJSON("https://api.github.com/repos/mbostock/d3/stats/commit_activity")
days <- data.frame(matrix(NA, nrow=7, ncol=52))
for (i in 1:52) {
days[,i] <- dayvec <- as.vector(metis[[i,1]])
}
csums <- colSums(days)
daycsum <- rbind(days, csums)
rsums <- rowSums(daycsum)
daysum <- cbind(daycsum, rsums)
Weekday <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Weeksum")
commits <- cbind(Weekday, daysum)
names(commits) <- c("Weekday", as.character(c(1:52)), "Daysum")
commits[,1] <- as.factor(commits[,1])
weekd <- c("weekend", "workday", "workday", "workday", "workday", "workday", "weekend", "Weeksum")
commitw <- commits
commitw[,1] <- weekd
commitg <- ddply(commitw, .(weekd), numcolwise(sum), drop=FALSE)
commitg$weekd <- factor(commitg$weekd, levels=c("workday","weekend","Weeksum"))
library("reshape2")
d1 <- commitg[-2,-54]
md1 <- melt(d1, id.vars="weekd", value.name="value", variable.name="weeks")
g <-ggplot(md1, aes(x=weeks, y=value, group=weekd, fill=weekd, color=weekd))
g <- g + geom_bar(color="black", stat='identity')
## g <- g + geom_line()
g <- g + theme(axis.text.x = element_text(size=12, face="bold"))
g <- g + theme(axis.text.y = element_text(size=15, face="bold"))
g <- g + theme(axis.title=element_text(size=12,face="bold"))
g <- g + theme(title=element_text(size=14,face="bold"))
g <- g + labs(y = "Number of commits")
g <- g + labs(title = "Number of commits for each week in last year (github.com/mbostock/d3) - Color by weekday")
print(g)
md1
commit <- commits[-8,]
commit$Weekday <- as.character(commit$Weekday)
commit$Weekday <- factor(commit$Weekday, levels=unique(commit$Weekday))
commean <- mean(commit[,54])
g <-ggplot(commit, aes(x=Weekday, y=Daysum))
g <- g + geom_bar(color="black", fill="light blue", stat="identity")
g <- g + geom_hline(aes(yintercept=commean), data=commit, colour="red", linetype="dashed")
g <- g + theme(axis.text.x = element_text(size=15, face="bold"))
g <- g + theme(axis.text.y = element_text(size=15, face="bold"))
g <- g + theme(axis.title=element_text(size=12,face="bold"))
g <- g + theme(title=element_text(size=14,face="bold"))
g <- g + labs(y = "Total number of commits")
g <- g + labs(title = "Number of commits for each weekday in last year (github.com/mbostock/d3) - Red dashed line = mean value")
print(g)
commit
commits
install.packages("shiny")
library(shiny)
library(shiny)
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
library(slidify)
i <- installed.packages()  i[ i[,"Priority"] %in% c("base","recommended"), c("Package", "Priority")]
i <- installed.packages()
i[ i[,"Priority"] %in% c("base","recommended"), c("Package", "Priority")]
getOption("defaultPackages")
showMethods(show)
showMethods(lm)
showMethods(dgamma)
showMethods(colSums)
getClass(show)
showMehtods(show)
showMethods(show)
getMethod(show)
getClass(show)
getS3method(show)
getClass(numeric)
getClass(factor)
showMethods(QueryAgora, classes="au", includeDef=TRUE)
showMethods(show, classes="au", includeDef=TRUE)
showMethods(mena, classes="au", includeDef=TRUE)
showMethods(mean, classes="au", includeDef=TRUE)
showMethods("plot", classes = "track")
getMethod(show)
install.packages("shiny")
library(shiny)
install.packages("manipulate")
library(manipulate)
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
setwd("~/Desktop/Coursera/DDP02")
author("Mtcars_Analysis")
library(knitr)
slidify("index.Rmd")
library(knitr)
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
publish_github("marcolunardi", "DDPAssignment02")
publish_github("DDPAssignment02", "marcolunardi")
setwd("~/Desktop/Coursera/DDP02/Mtcars_Analysis")
publish_github("DDPAssignment02", "marcolunardi")
